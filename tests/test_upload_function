import pytest
from unittest.mock import AsyncMock, MagicMock
from io import BytesIO
from uuid import uuid4

@pytest.fixture
def mock_minio_client(monkeypatch):
    minio_client = MagicMock()
    minio_client.put_object = AsyncMock(return_value=True)
    monkeypatch.setattr("app.config.minio_client", minio_client)
    return minio_client

@pytest.fixture
async def mock_session():
    session = AsyncMock()
    session.commit = AsyncMock()
    session.add = AsyncMock()
    return session

class MockUser:
    def __init__(self, user_id, profile_picture_url=None):
        self.id = user_id
        self.profile_picture_url = profile_picture_url

    def __repr__(self):
        return f"<User id={self.id}>"

async def test_upload_valid_picture(mock_session, mock_minio_client):
    user_id = uuid4()
    mock_session.get_by_id = AsyncMock(return_value=MockUser(user_id))
    file = BytesIO(b"fake_image_data")
    filename = "profile.jpg"

    from app.services.user_service import UserService
    user = await UserService.upload_profile_picture(
        mock_session, user_id, file, filename
    )

    assert user.profile_picture_url is not None
    mock_minio_client.put_object.assert_called_once()
    mock_session.commit.assert_called_once()

async def test_upload_invalid_file_extension(mock_session):
    user_id = uuid4()
    file = BytesIO(b"fake_image_data")
    filename = "profile.txt"

    from app.services.user_service import UserService
    user = await UserService.upload_profile_picture(
        mock_session, user_id, file, filename
    )

    assert user is None
    mock_session.commit.assert_not_called()

async def test_upload_large_file(mock_session, mock_minio_client):
    user_id = uuid4()
    file = BytesIO(b"x" * 10_000_000)  # Simulate a 10 MB file
    filename = "profile.png"

    from app.services.user_service import UserService
    user = await UserService.upload_profile_picture(
        mock_session, user_id, file, filename
    )

    assert user.profile_picture_url is not None
    mock_minio_client.put_object.assert_called_once()
    mock_session.commit.assert_called_once()

async def test_upload_missing_file(mock_session):
    user_id = uuid4()
    filename = "profile.jpg"

    from app.services.user_service import UserService
    user = await UserService.upload_profile_picture(
        mock_session, user_id, None, filename
    )

    assert user is None
    mock_session.commit.assert_not_called()

async def test_upload_missing_user_id(mock_session):
    file = BytesIO(b"fake_image_data")
    filename = "profile.jpg"

    from app.services.user_service import UserService
    user = await UserService.upload_profile_picture(
        mock_session, None, file, filename
    )

    assert user is None
    mock_session.commit.assert_not_called()

async def test_upload_user_not_found(mock_session):
    user_id = uuid4()
    mock_session.get_by_id = AsyncMock(return_value=None)
    file = BytesIO(b"fake_image_data")
    filename = "profile.jpg"

    from app.services.user_service import UserService
    user = await UserService.upload_profile_picture(
        mock_session, user_id, file, filename
    )

    assert user is None
    mock_session.commit.assert_not_called()


async def test_minio_upload_failure(mock_session, mock_minio_client):
    user_id = uuid4()
    mock_session.get_by_id = AsyncMock(return_value=MockUser(user_id))
    mock_minio_client.put_object = AsyncMock(side_effect=Exception("MinIO error"))
    file = BytesIO(b"fake_image_data")
    filename = "profile.png"

    from app.services.user_service import UserService
    user = await UserService.upload_profile_picture(
        mock_session, user_id, file, filename
    )

    assert user is None
    mock_session.commit.assert_not_called()

async def test_upload_empty_file(mock_session):
    user_id = uuid4()
    file = BytesIO(b"")
    filename = "profile.jpg"

    from app.services.user_service import UserService
    user = await UserService.upload_profile_picture(
        mock_session, user_id, file, filename
    )

    assert user is None
    mock_session.commit.assert_not_called()

async def test_upload_file_without_extension(mock_session):
    user_id = uuid4()
    file = BytesIO(b"fake_image_data")
    filename = "profile"

    from app.services.user_service import UserService
    user = await UserService.upload_profile_picture(
        mock_session, user_id, file, filename
    )

    assert user is None
    mock_session.commit.assert_not_called()

async def test_successful_commit(mock_session, mock_minio_client):
    user_id = uuid4()
    mock_session.get_by_id = AsyncMock(return_value=MockUser(user_id))
    file = BytesIO(b"fake_image_data")
    filename = "profile.jpeg"

    from app.services.user_service import UserService
    user = await UserService.upload_profile_picture(
        mock_session, user_id, file, filename
    )

    assert mock_session.commit.call_count == 1
